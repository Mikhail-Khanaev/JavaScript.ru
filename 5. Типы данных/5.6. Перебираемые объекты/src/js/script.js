"use strict"
//=========================================================
// –ê —á—Ç–æ –µ—Å–ª–∏...
//=========================================================

let range = {
    from: 1,
    to: 5,
};

range[Symbol.iterator] = function () {
    return {
        current: this.from,
        value: this.to,

        // —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–ø–∏—à–µ–º –º–µ—Ç–æ–¥ next(), –∫–æ—Ç–æ—Ä—ã–π –æ–±—ä—è—Å–Ω–∏—Ç —Ü–∏–∫–ª—É for..of –∫–∞–∫ –Ω–∞–º –ø–µ—Ä–µ–±–∏—Ä–∞—Ç—å –Ω–∞—à –æ–±—ä–µ–∫—Ç range

        next() {
            if (this.current <= this.value) {
                return { done: false, value: this.current++ }
            } else {
                return { done: true }
            }
        }
    };
};

// for (let num of range) {
//     alert(num);
// }


// let arrayLike = {
//     0: "hello",
//     1: "world",
//     length: 2,
// }

// // let arr = Array.from(arrayLike);
// // let arr = Array.from(range);
// let arr = Array.from(range, (num) => num ** 2);
// alert(arr);

function slice(str, start, end) {
    return Array.from(str).slice(start, end).join('');
}

let str = 'ùí≥üòÇ©∑∂';

alert(slice(str, 1, 3)); // üòÇ©∑∂

// –∞ –≤–æ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å—É—Ä—Ä–æ–≥–∞—Ç–Ω—ã–µ –ø–∞—Ä—ã
alert(str.slice(1, 3));
//=========================================================
// –ó–∞–¥–∞–Ω–∏–µ ‚Ññ1
//=========================================================
